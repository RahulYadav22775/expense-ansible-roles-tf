  - name: disable nodejs
    ansible.builtin.command: dnf module disable nodejs -y

  - name: enable nodejs 20
    ansible.builtin.command: dnf module enable nodejs:20 -y

  - name: install nodejs
    ansible.builtin.package:
     name: nodejs
     state: present

  - name: install mysql
    ansible.builtin.package:
     name: mysql
     state: present

  - name: create user expense
    ansible.builtin.user:
      name: expense

  - name: installing PyMySQL using pip
    ansible.builtin.pip:
      name: PyMySQL
      state: present
      executable: pip3.9

  - name: installing cryptography using pip
    ansible.builtin.pip:
      name: cryptography
      state: present
      executable: pip3.9

  - name: import tasks from common role
    tags:
    - deployment
    ansible.builtin.import_role:
       name: common
       tasks_from: app-pre-req
  
  # - name: remove  a directory
  #   ansible.builtin.file:
  #     path: /app
  #     state: absent

  # - name: create  a directory
  #   ansible.builtin.file:
  #     path: /app
  #     state: directory

  # - name: download the code
  #   ansible.builtin.get_url:
  #     url: https://expense-builds.s3.us-east-1.amazonaws.com/expense-backend-v2.zip
  #     dest: /tmp/backend.zip

  # - name: unzip the code
  #   ansible.builtin.unarchive:
  #     src: /tmp/backend.zip #by default ansible thinks this is in ansible server
  #     dest: /app
  #     remote_src: yes

  - name: install dependencies
    tags:
    - deployment
    ansible.builtin.command: npm install
    args: 
      chdir: /app

  - name: copy the backend service file
    ansible.builtin.template:
      src: backend.service.j2
      dest: /etc/systemd/system/backend.service

  - name: load database schemas
    community.mysql.mysql_db:
      login_user: root
      login_password: "{{ mysql_root_password }}"
      login_host: "{{ login_host }}"
      target: /app/schema/backend.sql
      name: all
      state: import

  - name: daemon-reload
    tags:
    - deployment
    ansible.builtin.systemd_service:
        daemon_reload: true
        state: restarted
        name: backend
        enabled: true
        